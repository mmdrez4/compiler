Program->$|int|void
Declaration-list->e|int|void
Declaration->int|void
Declaration-initial->int|void
Declaration-prime->(|;|[
Var-declaration-prime->;|[
Fun-declaration-prime->(
Type-specifier->int|void
Params->int|void
Param-list->,|e
Param->int|void
Param-prime->[|e
Compound-stmt->{
Statement-list->e|{|break|;|if|repeat|return|ID|(|NUM
Statement->{|break|;|if|repeat|return|ID|(|NUM
Expression-stmt->break|;|ID|(|NUM
Selection-stmt->if
Else-stmt->endif|else
Iteration-stmt->repeat
Return-stmt->return
Return-stmt-prime->;|ID|(|NUM
Expression->ID|(|NUM
B->=|[|(|*|+|-|<|==|e
H->=|*|e|+|-|<|==
Simple-expression-zegond->(|NUM
Simple-expression-prime->(|*|+|-|<|==|e
C->e|<|==
Relop-><|==
Additive-expression->(|ID|NUM
Additive-expression-prime->(|*|+|-|e
Additive-expression-zegond->(|NUM
D->e|+|-
Addop->+|-
Term->(|ID|NUM
Term-prime->(|*|e
Term-zegond->(|NUM
G->*|e
Factor->(|ID|NUM
Var-call-prime->(|[|e
Var-prime->[|e
Factor-prime->(|e
Factor-zegond->(|NUM
Args->e|ID|(|NUM
Arg-list->ID|(|NUM
Arg-list-prime->,|e